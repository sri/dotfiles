;; -*- mode: emacs-lisp -*-
(require 'cl)

(defvar my-emacs-start-time (current-time))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(bm-face ((t (:background "#eab700" :weight bold :foreground "black"))))
 '(comint-highlight-prompt ((t nil)))
 '(magit-diff-added ((t (:foreground "green"))))
 '(magit-diff-added-highlight ((t (:foreground "#22aa22"))))
 '(magit-diff-context-highlight ((t nil)))
 '(magit-diff-file-heading ((t nil)))
 '(magit-diff-file-heading-highlight ((t nil)))
 '(magit-diff-hunk-heading ((t (:foreground "grey30"))))
 '(magit-diff-hunk-heading-highlight ((t nil)))
 '(magit-diff-removed ((t (:foreground "#aa2222"))))
 '(magit-diff-removed-highlight ((t (:foreground "#aa2222"))))
 '(magit-section-highlight ((t nil)))
 '(minibuffer-prompt ((t (:foreground "#839496"))))
 '(mode-line ((t (:background "#404045" :foreground "gray60" :inverse-video nil))))
 '(org-done ((t (:strike-through t))))
 '(org-headline-done ((t (:strike-through t))))
 '(org-level-1 ((t (:inherit variable-pitch :foreground "#cb4b16" :height 1.0))))
 '(org-level-2 ((t (:inherit variable-pitch :foreground "#839496" :height 1.0))))
 '(org-level-3 ((t (:inherit variable-pitch :foreground "#839496" :height 1.0))))
 '(org-level-4 ((t (:inherit variable-pitch :foreground "#839496" :height 1.1))))
 '(whitespace-line ((t (:underline t)))))

(when window-system
  (custom-theme-set-faces 'user
                          '(default ((t (:inherit nil :stipple nil :background "#002b36" :foreground "#839496" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 140 :width normal :foundry "nil" :family "Monaco"))))))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    ("3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa" "c5a044ba03d43a725bd79700087dea813abcb6beb6be08c7eb3303ed90782482" "756597b162f1be60a12dbd52bab71d40d6a2845a3e3c2584c6573ee9c332a66e" "6a37be365d1d95fad2f4d185e51928c789ef7a4ccf17e7ca13ad63a8bf5b922f" default)))
 '(package-selected-packages
   (quote
    (nlinum yasnippet visual-regexp solarized-theme smart-mode-line ruby-end rainbow-mode multiple-cursors magit macrostep helm-projectile go-mode flycheck elisp-slime-nav coffee-mode browse-kill-ring bm autopair))))

(defun my-load (src &optional ignore-if-missing)
  "Load the byte-compiled version of SRC.
If IGNORE-IF-MISSING is non-NIL, then don't throw an
error if SRC is missing."
  (setq src (expand-file-name (if (string-suffix-p ".el" src)
                                  src
                                (concat src ".el"))))
  (let ((compiled (concat src "c")))
    (cond ((file-exists-p src)
           (if (file-newer-than-file-p src compiled)
               (let (byte-compile-verbose)
                 (byte-compile-file src)))
           (load compiled nil t t))
          (t (if (file-exists-p compiled)
                 (delete-file compiled))
             (if (not ignore-if-missing)
                 (error "Missing `%s'" src))))))

(byte-compile 'my-load)

(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)
(package-initialize)

(defvar my-packages
  '(
    autopair
    bm
    browse-kill-ring
    coffee-mode
    elisp-slime-nav
    flycheck
    go-mode
    helm
    helm-projectile
    macrostep
    magit
    nlinum
    org
    org-bullets
    projectile
    rainbow-mode
    ruby-end
    smart-mode-line
    solarized-theme
    visual-regexp
    web-mode
    yasnippet
    ))

(let ((missing (remove-if 'package-installed-p my-packages)))
  (when missing
    (package-refresh-contents)
    (mapc 'package-install missing)))

(my-load "~/.emacs.d/my-emacs")
(setq my-time-diff-secs (float-time (time-since my-emacs-start-time)))
