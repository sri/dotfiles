#! /usr/bin/env python3

import sys
import re
import subprocess
import platform
from collections import namedtuple


def sh(cmd):
    try:
        output = subprocess.check_output(
            cmd, stderr=subprocess.STDOUT, shell=True
        ).decode("utf-8")
        successful_run = True
    except subprocess.CalledProcessError:
        output = ""
        successful_run = False

    return namedtuple(output=output, successful_run=successful_run)


def successful_run(cmd):
    return sh(cmd).successful_run


def cmd_output(cmd):
    return sh(cmd).output


def error(msg):
    sys.exit(msg)


def all_branch_names():
    names = set()
    for line in cmd_output("git branch -a").splitlines():
        line = line.strip()
        if line.startswith("*"):
            continue
        names.add(re.sub("^remotes/", "", line))
    return names


def ensure_in_git_repo():
    if not successful_run("git rev-parse --show-toplevel"):
        error("not in a git repo")


def open_url(url):
    if (system := platform.system()) == "Linux":
        sh(f"xdg-open {url}")
    elif system == "Darwin":
        sh(f"open {url}")
    else:
        print(f"Visit {url}")
        error("Unknown system: unable to open url")


def get_current_branch():
    return cmd_output("git rev-parse --abbrev-ref HEAD").strip()


def git_new_branch(*args):
    if len(args) != 1:
        error("usage: g new_branch <new-branch-name>")
    new_branch = args[0]
    if not re.match("^[A-Za-z0-9_/-]+$", new_branch):
        error(f"invalid branch name: {new_branch}")
    ensure_in_git_repo()
    current_branch = get_current_branch()
    if current_branch in all_branch_names():
        error("branch name already exists")
    if current_branch != "master":
        if not successful_run("git checkout master"):
            sh("git stash && git checkout master")
    sh(f"git checkout -b {new_branch}")


def git_push_branch(*args):
    if args:
        error("usage: g push_branch")
    ensure_in_git_repo()
    current_branch = get_current_branch()
    if current_branch == "master" or current_branch.startswith("origin"):
        error("not pushing to master or branch named origin")
    output = cmd_output(f"git push -u origin {current_branch}")
    print(output)
    if m := re.search("(https.*/pull/new/[^\s]*)", output):
        github_pr_url = m.group(1).strip()
        open_url(github_pr_url)


def main():
    args = sys.argv[1:]
    if len(args) == 0:
        error("usage: g new_branch | push_branch")
    else:
        cmd, *cmd_args = args
        if cmd in ("nb", "new_branch"):
            git_new_branch(*cmd_args)
        elif cmd in ("pb", "push_branch"):
            git_push_branch(*cmd_args)
        else:
            error(f"invalid command: {cmd}")


if __name__ == "__main__":
    main()
