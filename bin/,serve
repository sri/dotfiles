#!/usr/bin/env python3

import os
import sys
import argparse
import webbrowser
import random

from http.server import HTTPServer, SimpleHTTPRequestHandler

class RequestHandler(SimpleHTTPRequestHandler):
    custom_headers = []
    custom_directory = ""

    def translate_path(self, path):
        return self.custom_directory + super().translate_path(path)

    def end_headers(self):
        for (key, val) in self.custom_headers:
            self.send_header(key, val)
        super().end_headers()

def randport():
    return random.randint(8000, 9999)

def init_httpd(user_requested_port, request_handler):
    port = user_requested_port or randport()

    for _ in range(20):
        try:
            httpd = HTTPServer(("", port), request_handler)
            return (port, httpd)
        except OSError as err:
            if user_requested_port:
                # If user supplied a port and we are not able
                # to access it, error out.
                raise err

            # If port is already in use, try again with a new port.
            port = randport()
            print(f"[trying port {port}]")

    sys.exit("Unable to find a valid port")

def main():
    parser = argparse.ArgumentParser(description="A Simple HTTP server that serves the specified directory")
    parser.add_argument("-c", "--cors", action="store_true")
    parser.add_argument("-p", "--port", type=int, help="specify the port", default=None)
    parser.add_argument("dir", type=str, nargs="?", default=".",
                        help="specify the directory to serve, defaults to current directory")
    args = parser.parse_args()

    directory_to_serve = os.path.abspath(args.dir)
    port = args.port
    send_cors_header = args.cors

    if not os.path.exists(directory_to_serve):
        sys.exit(f"{directory_to_serve} does not exist")

    headers = []
    if send_cors_header:
        headers.append(("Access-Control-Allow-Origin", "*"))
        print(f"[adding headers: {headers}]")

    RequestHandler.custom_headers = headers
    RequestHandler.custom_directory = directory_to_serve

    port, httpd = init_httpd(port, RequestHandler)

    print("[changing cwd to /]")
    os.chdir("/")

    print(f"[serving {directory_to_serve} on http://localhost:{port}]")
    webbrowser.open(f"http://localhost:{port}")

    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass

if __name__ == "__main__":
    main()
