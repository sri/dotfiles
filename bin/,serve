#!/usr/bin/env python3

import os
import sys
import argparse
import webbrowser

from http.server import HTTPServer, SimpleHTTPRequestHandler

class RequestHandler(SimpleHTTPRequestHandler):
    custom_headers = []
    custom_directory = ""

    def translate_path(self, path):
        path = super().translate_path(path)
        path = self.custom_directory + path
        return path

    def end_headers(self):
        for (key, val) in self.custom_headers:
            self.send_header(key, val)
        super().end_headers()

def main():
    parser = argparse.ArgumentParser(description="A Simple HTTP server")
    parser.add_argument("--cors", action='store_true')
    parser.add_argument("--port", type=int, help="specify the port", default=8000)
    parser.add_argument("dir", type=str, nargs="?", help="specify the directory to serve", default=".")

    args = parser.parse_args()

    directory_to_serve = os.path.abspath(args.dir)
    port = args.port
    send_cors_header = args.cors

    headers = []
    if send_cors_header:
        headers.append(("Access-Control-Allow-Origin", "*"))
        print("adding headers:")
        print(headers)

    while True:
        try:
            httpd = HTTPServer(("", port), RequestHandler)
        except OSError:
            # If port is already in use, try again with a new port.
            port += 1
        else:
            break

    RequestHandler.custom_headers = headers
    RequestHandler.custom_directory = directory_to_serve

    print("[changing cwd to /]")
    os.chdir("/")

    print(f"[serving {directory_to_serve} on http://localhost:{port}]")
    webbrowser.open(f"http://localhost:{port}")

    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass

if __name__ == "__main__":
    main()
