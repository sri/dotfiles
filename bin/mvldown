#! /usr/bin/env python

# Move the last downloaded file in ~/Downloads to the current
# directory. An argument specifies the new name for that downloaded
# file.

import os
import sys

def by_most_recent(path):
    """Return files in path ordered by last modified time, most recent
       last."""
    files = [ os.path.join(path, f) for f in os.listdir(path) ]
    return sorted(files, key=os.path.getmtime)

def path_relative_to_user_home(path):
    """Return path with user home directory replaced with `~', if
       possible."""
    path = os.path.abspath(path)
    userhome = os.path.expanduser("~").rstrip(os.sep)
    if path.startswith(userhome):
        return os.path.join("~", path[len(userhome):].lstrip(os.sep))
    else:
        return path

def mvldown(path, new_name):
    files = by_most_recent(path)

    if len(files) == 0:
        print "nothing in %s" % path_relative_to_user_home(path)
        return

    latest = files[-1]
    if not new_name:
        new_name = os.path.basename(latest)

    if os.path.exists(new_name):
        print "./%s already exists" % new_name
        return

    # Ignore the race condition between checking above if new_name
    # exists and the rename below, since rename will silently
    # overwrite the new_name, if it exists.
    os.rename(latest, new_name)
    print "moved %s to %s" % (path_relative_to_user_home(latest),
                              new_name)


def main():
    new_name = (sys.argv[1] if len(sys.argv) == 2 else None)
    downloads_dir = os.path.expanduser("~/Downloads")

    try:
        mvldown(downloads_dir, new_name)
    except Exception, err:
        print err
        sys.exit(1)

if __name__ == "__main__":
    main()
